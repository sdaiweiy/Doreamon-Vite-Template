{
  "compilerOptions": {
    //指定ECMAScript目标版本，esnext为最新版本
    "target": "ESNext",
    //将 class 声明中的字段语义从 [[Set]] 变更到 [[Define]]
    "useDefineForClassFields": true,
    //指定生成哪个模块系统代码，esnext为最新版本
    "module": "ESNext",
    //决定如何处理模块
    "moduleResolution": "Node",
    //启用所有严格类型检查选项。
    "strict": true,
    //禁止对同一个文件的不一致的引用。
    "forceConsistentCasingInFileNames": true,
    //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查
    "allowSyntheticDefaultImports": true,
    //禁用函数参数双向协变检查
    "strictFunctionTypes": false,
    //在.tsx文件里支持JSX
    "jsx": "preserve",
    //解析非相对模块名的基准目录
    "baseUrl": ".",
    //将每个文件作为单独的模块
    "isolatedModules": true,
    //生成相应的 .map文件。
    "sourceMap": true,
    //支持在 CommonJs 模块下使用 import d from 'cjs'
    "esModuleInterop": true,
    //支持JSON导入
    "resolveJsonModule": true,
    //若有未使用的局部变量则抛错。
    "noUnusedLocals": true,
    //若有未使用的参数则抛错
    "noUnusedParameters": true,
    //启用实验性的ES装饰器
    "experimentalDecorators": true,
    //编译过程中需要引入的库文件的列表
    "lib": ["ESNext", "DOM"],
    //忽略所有的声明文件（ *.d.ts）的类型检查。
    "skipLibCheck": true,
    //不生成编译后的js文件
    "noEmit": true
  },
  //模块名到基于 baseUrl的路径映射的列表
  "paths": {
    "/@/*": ["src/*"],
    "/#/*": ["types/*"]
  },
  //指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.d.ts",
    "types/**/*.ts"
  ],
  // 指定一个排除列表（include的反向操作）
  "exclude": ["node_modules", "dist"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
